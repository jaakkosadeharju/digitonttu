{"version":3,"sources":["webpack://digitonttu/./public/src/clock.ts","webpack://digitonttu/./public/src/dimensions.ts","webpack://digitonttu/./public/src/point.ts","webpack://digitonttu/./public/src/player.ts","webpack://digitonttu/./public/src/present.ts","webpack://digitonttu/./public/src/terrain.ts","webpack://digitonttu/./public/src/game.ts","webpack://digitonttu/./public/src/sounds.ts"],"names":["ctx","terrain","extensionVisible","extendTime","seconds","timeExtensions","push","time","Date","this","draw","font","fillStyle","textAlign","Math","max","formatted","round","toFixed","fillText","replace","areaDimensions","width","height","filter","t","getTime","forEach","e","i","timeLeft","x","y","distanceTo","point","dx","dy","sqrt","canvas","startingPosition","Point","gravityScale","skiWidth","playerHeight","gravity","divingWeight","friction","onScreenX","position","longestJump","jumps","sort","a","b","highestPoint","minY","topSpeed","maxSpeed","ski","back","cos","angle","sin","front","velocityAngle","pos1","positionHistory","length","pos2","atan2","calculateFrame","dt","collectedPresents","splice","lastPosition","getHeightAt","terrainHeight","terrainAngle","diving","velocity","jumpStartPos","onGround","speed","pow","abs","PI","min","atGround","handleDiveButtonPress","divePressed","hanldeDiveButtonRelease","getContext","addEventListeners","drawImage","image","scale","rotation","setTransform","rotate","drawImageCenter","cx","cy","player","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","document","getElementById","slice","present","presentSlot","p","visible","window","addEventListener","code","preventDefault","classList","add","remove","collected","random","handleRadius","handleStrokeWidth","maxVerticalHeight","minVerticalHeight","startDrag","identifier","draggingHandles","mouseCanvasPosition","offsetLeft","offsetWidth","offsetTop","offsetHeight","closestPoint","points","reduce","closest","Infinity","moveTerrainHandle","endDrag","undefined","resetPoints","addMouseEventListeners","pointsWithControlPoint","pointsWithControlPoints","snow","createLinearGradient","addColorStop","bezierCurveTo","cp1","cp2","closePath","fill","arc","getBezierXY","start","end","getBezierAngle","leftPoint","rightPoint","console","error","extrapolatedPoints","arr","elem","pointsArr","prevX","clientX","clientY","touches","touch","targetTouches","item","changedTouches","innerHeight","innerWidth","presents","startTime","clock","areaHeight","areaWidth","gameExtraTime","highscore","JSON","parse","localStorage","getItem","stats","gamesPlayed","sounds","mainVolume","gameVolume","fxVolume","startGameTune","gameTune","stopGameTune","Audio","loop","volume","enabled","play","stopTune","startMainTune","mainTune","stopMainTune","tune","h","setInterval","pause","clearInterval","playCollectSound","collectSound","toggleMute","setItem","drawSky","bg","fillRect","setAreaDimensions","getElementsByTagName","style","updateHtmlTargets","innerText","toString","updateSoundButton","soundButton","innerHTML","initGame","Terrain","Dimensions","Clock","Player","Present","refresh","clearRect","playerSize","timeIncrement","requestAnimationFrame","score","stringify","setTimeout","onresize","onscroll","onclick","interval","t0","t1","startGame","diveButton"],"mappings":"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","file":"gameBundle.js","sourcesContent":["import { Terrain } from \"./terrain\";\n\nexport class Clock {\n    constructor(ctx: CanvasRenderingContext2D, terrain: Terrain) {\n        this.ctx = ctx;\n        this.terrain = terrain;\n        this.timeExtensions = [];\n    }\n\n    terrain: Terrain;\n    timeExtensions: any[];\n    extensionVisible = 5; //  seconds\n\n    ctx: CanvasRenderingContext2D;\n\n    public draw(time: number) {\n        if (!this.terrain) {\n            return;\n        }\n\n        this.ctx.font = \"100px Josefin Sans\";\n        this.ctx.fillStyle = '#afa5';\n        this.ctx.textAlign = \"center\";\n        const seconds = Math.max(0, (time / 1000));\n        const formatted = Math.round(seconds).toFixed();\n        this.ctx.fillText(` ${formatted} s`.replace('.', ','), this.terrain.areaDimensions.width / 2, this.terrain.areaDimensions.height / 2);\n\n        // Draw time extensions\n        this.timeExtensions = this.timeExtensions.filter(t => (new Date()).getTime() < (t.time.getTime() + this.extensionVisible * 1000));\n        this.timeExtensions.forEach((e, i) => {\n            const timeLeft = ((e.time.getTime() + this.extensionVisible * 1000) - (new Date()).getTime()) / 1000;\n            this.ctx.font = \"40px Josefin Sans\";\n            if (e.seconds > 0) {\n                this.ctx.fillStyle = `rgba(30, 220, 30, ${timeLeft / this.extensionVisible})`;\n            } else {\n                this.ctx.fillStyle = `rgba(220, 30, 30, ${timeLeft / this.extensionVisible})`;\n            }\n            this.ctx.textAlign = \"center\";\n            const formatted = e.seconds.toFixed(1);\n            this.ctx.fillText(`${e.seconds > 0 ? '+' : ''}${formatted} s`.replace('.', ','), this.terrain.areaDimensions.width / 2, this.terrain.areaDimensions.height / 2 + ((1 - timeLeft / this.extensionVisible) * 100));\n        });\n    }\n\n    extendTime = (seconds: number) => {\n        this.timeExtensions.push({\n            seconds,\n            time: new Date()\n        })\n    }\n}","export class Dimensions {\n    constructor(width: number, height: number) {\n        this.width = width;\n        this.height = height;\n    }\n\n    width: number;\n    height: number;\n}","export class Point {\n    constructor(x: number, y: number) {\n        this.x = x;\n        this.y = y;\n    }\n\n    x: number;\n    y: number;\n    cp1: Point;\n    cp2: Point;\n\n    // Euclidean distance between this and the argument point\n    public distanceTo(point: Point) {\n        const dx = this.x - point.x;\n        const dy = this.y - point.y;\n\n        // Calculate the distance\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n}","import { Point } from \"./point\";\nimport { Present } from \"./present\";\nimport { Terrain } from \"./terrain\";\n\nexport class Player {\n    lastCalcTime: Date;\n    atGround: boolean;\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n    terrain: Terrain;\n    gravityScale = 30;\n    skiWidth = 30;\n    playerHeight = 20;\n    position: Point;\n    angle: number; // rad\n    velocity: Point;\n    gravity = 9.81 * this.gravityScale;\n    diving: boolean;\n    divingWeight = 3;\n    positionHistory: Point[];\n    friction = 0.9;\n    divePressed: boolean;\n    onGround: boolean;\n    jumpStartPos: number;\n    jumps: number[];\n    minY: number;\n    maxSpeed: number;\n\n    onScreenX = () => ((this.terrain.areaDimensions.width + this.position.x) % this.terrain.areaDimensions.width);\n    longestJump = () => Math.round((this.jumps.sort((a, b) => b - a)[0]) || 0);\n    highestPoint = () => Math.round((this.terrain.areaDimensions.height - this.minY) / 50);\n    topSpeed = () => Math.round(this.maxSpeed / 50 * 3.6);\n\n    constructor(canvas: HTMLCanvasElement, terrain: Terrain, startingPosition: Point = new Point(100, 100)) {\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\");\n        this.terrain = terrain;\n        this.position = startingPosition;\n        this.angle = 0;\n        this.velocity = new Point(10, 10);\n        this.positionHistory = [];\n        this.atGround = false;\n        this.diving = false;\n        this.divePressed = false;\n        this.onGround = false;\n        this.jumps = [];\n        this.minY = this.terrain.areaDimensions.height;\n        this.maxSpeed = 0;\n\n        this.addEventListeners();\n    }\n\n    ski = () => ({\n        back: new Point(\n            this.position.x - (this.skiWidth / 2) * Math.cos(this.angle),\n            this.position.y - (this.skiWidth / 2) * Math.sin(this.angle)\n        ),\n        front: new Point(\n            this.position.x + (this.skiWidth / 2) * Math.cos(this.angle),\n            this.position.y + (this.skiWidth / 2) * Math.sin(this.angle)\n        )\n    });\n\n    velocityAngle = () => {\n        const pos1 = this.positionHistory[this.positionHistory.length - 1];\n        const pos2 = this.positionHistory[this.positionHistory.length - 2];\n\n        if (pos1 && pos2) {\n            return Math.atan2(pos2.y - pos1.y, pos2.x - pos1.x);\n        }\n        return 0;\n    }\n\n    calculateFrame = (dt: number, collectedPresents: Present[]) => {\n        if (dt === 0) {\n            return;\n        }\n        // Update history\n        this.positionHistory.push(new Point(this.position.x, this.position.y));\n        this.positionHistory.splice(0, Math.max(0, this.positionHistory.length - 1000));\n        const lastPosition = this.positionHistory[this.positionHistory.length - 5] || this.position;\n        const [terrainHeight, terrainAngle] = this.terrain.getHeightAt(this.onScreenX());\n\n        if (this.diving && terrainHeight - 20 <= this.position.y) {\n            this.velocity.y += (10 / (dt * 1000)) * Math.sin(terrainAngle);\n            this.velocity.x += (10 / (dt * 1000)) * Math.cos(-terrainAngle);\n        }\n\n        // player touches ground\n        if (terrainHeight - 1 <= this.position.y) {\n            // Store jump length\n            if (this.jumpStartPos && !this.onGround && this.position.x - this.jumpStartPos > 500) {\n                this.jumps.push((this.position.x - this.jumpStartPos) / 50);\n            }\n\n            this.onGround = true;\n\n            let speed = Math.sqrt(Math.pow(this.velocity.x, 2) + Math.pow(this.velocity.y, 2));\n\n            // if (this.diving) {\n            //     speed += (100 / (dt * 1000));\n            // }\n\n            this.velocity.x += Math.sin(terrainAngle) * (dt * this.gravity); // m/s\n\n            if (Math.abs(terrainAngle - this.angle) > (Math.PI / 4)) {\n                speed = Math.min(speed, 100); // kill the speed if angle too steep\n            }\n\n            if ((terrainAngle < this.angle || this.angle == 0) && this.velocity.x >= 0) {\n                // redirect the player when moving rightward\n                this.velocity.y = speed * Math.sin(terrainAngle);\n                this.velocity.x = speed * Math.cos(-terrainAngle);\n            }\n            else if (terrainAngle >= this.angle && this.velocity.x < 0) {\n                // redirect the player when moving leftward\n                this.velocity.y = speed * Math.sin(terrainAngle);\n                this.velocity.x = speed * Math.cos(-terrainAngle);\n            }\n            else {\n                // console.log(this.angle, terrainAngle, Math.sin(this.angle), Math.sin(terrainAngle))\n                // debugger;\n            }\n\n            this.angle = terrainAngle;\n            this.position.y = Math.min(terrainHeight, this.position.y);\n            this.atGround = true;\n        } else {\n            if (this.onGround) {\n                // store jump start\n                this.jumpStartPos = this.position.x;\n            }\n\n            this.onGround = false;\n\n            this.velocity.y += (dt * this.gravity * (this.diving ? this.divingWeight : 1)); // m/s\n\n            if (terrainHeight - 5 <= this.position.y) {\n                this.atGround = false;\n            }\n        }\n\n        // Set new location\n        this.position.x += (dt * this.velocity.x);\n        this.position.y += (dt * this.velocity.y);\n\n        // Store max height\n        if (this.position.y < this.minY) {\n            this.minY = this.position.y;\n        }\n\n        this.maxSpeed = Math.max(this.maxSpeed, Math.sqrt(Math.pow(this.velocity.x, 2) + Math.pow(this.velocity.y, 2)));\n\n        // Set the the angle of velocity as angle if not at ground\n        if (terrainHeight - 10 > this.position.y && this.position.distanceTo(lastPosition) < this.terrain.areaDimensions.width / 2) {\n            this.angle = Math.atan2(this.position.y - lastPosition.y, this.position.x - lastPosition.x);\n        }\n    }\n\n    drawImage(image: HTMLImageElement, x: number, y: number, scale: number, rotation: number) {\n        this.ctx.setTransform(scale, 0, 0, scale, x, y); // sets scale and origin\n        this.ctx.rotate(rotation);\n        this.ctx.drawImage(image, -image.width / 2, -image.height / 2);\n    }\n\n    drawImageCenter(image: HTMLImageElement, x: number, y: number, cx: number, cy: number, scale: number, rotation: number) {\n        this.ctx.setTransform(scale, 0, 0, scale, x, y); // sets scale and origin\n        this.ctx.rotate(rotation);\n        this.ctx.drawImage(image, -cx, -cy);\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n    }\n\n    draw(collectedPresents: Present[]) {\n        // Angle vector\n        // this.ctx.strokeStyle = \"#fff\";\n        // this.ctx.lineWidth = 5;\n        // this.ctx.beginPath();\n        // const ski = this.ski();\n        // this.ctx.moveTo(this.onScreenX(), this.position.y);\n        // this.ctx.lineTo(this.onScreenX() + this.velocity.x/5, this.position.y + this.velocity.y/5);\n        // this.ctx.stroke();\n\n\n        //Heigt indicator\n        if (this.position.y < - this.playerHeight) {\n            this.ctx.strokeStyle = \"#fff\";\n            this.ctx.lineWidth = 5;\n            this.ctx.beginPath();\n            this.ctx.moveTo(this.onScreenX(), 0);\n            this.ctx.lineTo(this.onScreenX(), 40);\n            this.ctx.stroke();\n\n            this.ctx.textAlign = \"left\";\n            this.ctx.font = \"30px Josefin Sans\";\n            this.ctx.fillStyle = '#dddddd99';\n            this.ctx.fillText(`${Math.round((this.terrain.areaDimensions.height - this.position.y) / 50)} m`, 30, 50);\n        }\n\n        let player: HTMLImageElement;\n        if (this.velocity.x >= 0) {\n            player = <HTMLImageElement>document.getElementById(\"player\");\n            this.drawImageCenter(player, this.onScreenX(), this.position.y, 150, 250, 1 / 5, this.angle);\n        } else {\n            player = <HTMLImageElement>document.getElementById(\"player-reversed\");\n            this.drawImageCenter(player, this.onScreenX(), this.position.y, 150, 250, 1 / 5, this.angle);\n        }\n\n        const maxVisiblePresents = 20;\n        collectedPresents.slice(0, maxVisiblePresents).forEach((present, i) => {\n            let presentSlot = this.positionHistory[this.positionHistory.length - (i + 1) * 10];\n            present.position.x = (presentSlot.x % this.terrain.areaDimensions.width) - present.width / 2;\n            present.position.y = presentSlot.y - present.height / 2;\n        });\n        collectedPresents.slice(maxVisiblePresents).forEach(p => p.visible = false);\n\n        // // box\n        // this.ctx.beginPath();\n        // this.ctx.fillStyle = \"white\";\n        // // this.ctx.fillRect(this.onScreenX() - this.skiWidth/2, this.position.y - this.skiWidth, this.skiWidth, this.skiWidth);\n        // this.ctx.arc(this.onScreenX(), this.position.y - this.skiWidth, 10, 0, 2*Math.PI, false);\n        // this.ctx.fill();\n    }\n\n    private addEventListeners() {\n        // mouse events\n        window.addEventListener('keydown', e => {\n            if (e.code == 'Space') {\n                e.preventDefault();\n                document.getElementById('dive').classList.add('active');\n                this.diving = true;\n            }\n        }, false);\n        window.addEventListener('keyup', e => {\n            if (e.code == 'Space') {\n                e.preventDefault();\n                document.getElementById('dive').classList.remove('active');\n                this.diving = false;\n            }\n        }, false);\n    }\n\n\n    public handleDiveButtonPress = () => {\n        this.divePressed = true;\n        this.diving = true;\n        this.divePressed = true;\n    };\n\n    public hanldeDiveButtonRelease = () => {\n        if (this.divePressed) {\n            this.diving = false;\n            this.divePressed = false;\n        }\n    };\n}","import { Point } from \"./point\";\nimport { Terrain } from \"./terrain\";\n\nexport class Present {\n    constructor(canvas: HTMLCanvasElement, terrain: Terrain) {\n        this.canvas = canvas;\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.collected = false;\n        this.position = new Point(\n            Math.random() * (terrain.areaDimensions.width - this.width),\n            Math.random() * (terrain.areaDimensions.height / 2 - this.height));\n        this.visible = true;\n    }\n\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n    position: Point;\n    collected: boolean;\n    width = 29 * (3 / 2);\n    height = 28 * (3 / 2);\n    visible: boolean;\n\n    public draw() {\n        if (!this.visible) {\n            return false;\n        }\n        \n        const ctx = this.ctx;\n\n        // ctx.fillStyle = '#f00';\n        // ctx.beginPath();\n        // ctx.arc(\n        //     this.position.x,\n        //     this.position.y,\n        //     this.width * (3 / 2),\n        //     0,\n        //     Math.PI * 2,\n        //     false);\n        // ctx.fill();\n\n        let present = <HTMLImageElement>document.getElementById(\"present\");\n        ctx.drawImage(present,\n            this.position.x - this.width / 2,\n            this.position.y - this.height / 2,\n            this.width,\n            this.height);\n    }\n}","import { Point } from \"./point\";\nimport { Dimensions } from \"./dimensions\";\n\nexport class Terrain {\n    constructor(canvas: HTMLCanvasElement, areaDimensions: Dimensions) {\n        this.areaDimensions = areaDimensions;\n        this.canvas = canvas;\n        this.resetPoints();\n        this.draggingHandles = {};\n\n        this.addMouseEventListeners();\n    }\n\n    handleRadius = 20;\n    handleStrokeWidth = 3;\n    maxVerticalHeight = () => this.areaDimensions.height * (14 / 20);\n    minVerticalHeight = () => this.areaDimensions.height * (17 / 20);\n    canvas: HTMLCanvasElement;\n    points: Point[];\n    areaDimensions: Dimensions;\n    draggingHandles: any;\n\n    draw() {\n        let ctx = this.canvas.getContext(\"2d\");\n        this.points = this.points.sort((a, b) => a.x - b.x);\n        const pointsWithControlPoint = this.pointsWithControlPoints();\n\n        let snow = ctx.createLinearGradient(0, this.minVerticalHeight(), 0, this.maxVerticalHeight());\n        snow.addColorStop(0, '#555');\n        snow.addColorStop(0.9, '#222');\n        // ctx.fillStyle = '#222';\n        ctx.fillStyle = snow;\n\n        ctx.beginPath();\n        ctx.moveTo(-this.areaDimensions.width, this.areaDimensions.height * 2);\n        ctx.lineTo(\n            pointsWithControlPoint[0].x,\n            pointsWithControlPoint[0].y);\n\n        // Draw the terrain\n        pointsWithControlPoint\n            .slice(1, pointsWithControlPoint.length)\n            .forEach(p =>\n                ctx.bezierCurveTo(p.cp1.x, p.cp1.y, p.cp2.x, p.cp2.y, p.x, p.y));\n\n        ctx.lineTo(this.areaDimensions.width * 2, this.areaDimensions.height * 2);\n\n        ctx.closePath();\n        ctx.fill();\n\n        // Draw the handles\n        this.points.forEach(p => {\n            ctx.beginPath();\n            ctx.arc(p.x, p.y, this.handleRadius, 0, 2 * Math.PI);\n            ctx.fillStyle = '#dddddd99';\n            ctx.fill();\n\n            ctx.beginPath();\n            ctx.arc(p.x, p.y, this.handleRadius, 0, 2 * Math.PI);\n            ctx.strokeStyle = '#aaaaaaff';\n            ctx.lineWidth = this.handleStrokeWidth;\n            ctx.stroke();\n        });\n    }\n\n    public getBezierXY(t: number, start: Point, end: Point) {\n        return {\n            x: Math.pow(1 - t, 3) * start.x + 3 * t * Math.pow(1 - t, 2) * end.cp1.x\n                + 3 * t * t * (1 - t) * end.cp2.x + t * t * t * end.x,\n            y: Math.pow(1 - t, 3) * start.y + 3 * t * Math.pow(1 - t, 2) * end.cp1.y\n                + 3 * t * t * (1 - t) * end.cp2.y + t * t * t * end.y\n        };\n    }\n\n    public getBezierAngle(t: number, start: Point, end: Point) {\n        var dx = Math.pow(1 - t, 2) * (end.cp1.x - start.x) + 2 * t * (1 - t) * (end.cp2.x - end.cp1.x) + t * t * (end.x - end.cp2.x);\n        var dy = Math.pow(1 - t, 2) * (end.cp1.y - start.y) + 2 * t * (1 - t) * (end.cp2.y - end.cp1.y) + t * t * (end.y - end.cp2.y);\n        return -Math.atan2(dx, dy) + 0.5 * Math.PI;\n    }\n\n    public getHeightAt(x: number) {\n        const points = this.pointsWithControlPoints().sort((a, b) => a.x - b.x);\n        let leftPoint;\n        let rightPoint;\n\n        if (x < 0 || x > this.areaDimensions.width) {\n            console.error(`Cannot resolve terrain height at ${x}`)\n        }\n\n        for (let i = 0; i < points.length; i++) {\n            if (points[i].x > x) {\n                rightPoint = points[i];\n                leftPoint = points[i - 1];\n                break;\n            }\n        }\n\n        let t = 1;\n        for (let i = 1; i <= 100 ; ++i) {\n            if (this.getBezierXY(t, leftPoint, rightPoint).x < x) {\n                t += 0.5/i;\n            } else {\n                t -= 0.5/i;\n            }\n        }\n\n        return [this.getBezierXY(t, leftPoint, rightPoint).y, this.getBezierAngle(t, leftPoint, rightPoint)];\n    }\n\n    // Add point to front and back to make line continue from edge to edge\n    private extrapolatedPoints() {\n        const points = this.points;\n\n        return [\n            {\n                x: points[points.length - 1].x - this.areaDimensions.width,\n                y: points[points.length - 1].y,\n            },\n            ...points,\n            {\n                x: this.areaDimensions.width + points[0].x,\n                y: points[0].y,\n            },\n        ];\n    }\n\n    // Add bezier control points to the array\n    private pointsWithControlPoints(): Point[] {\n        return this.extrapolatedPoints().reduce((arr, elem, i, pointsArr) => {\n            const prevX = pointsArr[(pointsArr.length + i - 1) % pointsArr.length].x;\n\n            return [\n                ...arr,\n                {\n                    x: elem.x,\n                    y: elem.y,\n                    cp1: {\n                        x: prevX + (elem.x - prevX) / 2,\n                        y: pointsArr[(pointsArr.length + i - 1) % pointsArr.length].y\n                    },\n                    cp2: {\n                        x: elem.x - (elem.x - prevX) / 2,\n                        y: elem.y\n                    }\n                }\n            ];\n        }, []);\n    }\n\n\n\n    // terrain mouse event handlers\n    startDrag = (x: number, y: number, identifier: number = 0) => {\n        if (this.draggingHandles[identifier]) {\n            return;\n        }\n\n        const mouseCanvasPosition = new Point(\n            (x - this.canvas.offsetLeft) / this.canvas.offsetWidth * this.canvas.width,\n            (y - this.canvas.offsetTop) / this.canvas.offsetHeight * this.canvas.height\n        )\n\n        const closestPoint = this.points.reduce((closest: Point, p: Point) => {\n            return (p.distanceTo(mouseCanvasPosition) < closest.distanceTo(mouseCanvasPosition) ? p : closest);\n        }, new Point(Infinity, Infinity));\n\n        if (closestPoint.distanceTo(mouseCanvasPosition) < this.handleRadius * 2) {\n            // console.log('START', identifier);\n            \n            this.draggingHandles[identifier] = closestPoint;\n        }\n    }\n    moveTerrainHandle = (x: number, y: number, identifier: number = 0) => {\n        if (this.draggingHandles[identifier]) {\n            const mouseCanvasPosition = new Point(\n                (x - this.canvas.offsetLeft) / this.canvas.offsetWidth * this.canvas.width,\n                (y - this.canvas.offsetTop) / this.canvas.offsetHeight * this.canvas.height\n            )\n\n            // console.log('MOVE', identifier, x, y);\n            \n            this.draggingHandles[identifier].x = mouseCanvasPosition.x;\n            this.draggingHandles[identifier].y = Math.max(Math.min(mouseCanvasPosition.y, this.minVerticalHeight()), this.maxVerticalHeight());\n        }\n    }\n    endDrag = (identifier: number = 0) => {\n        if (this.draggingHandles[identifier] !== undefined) {\n            // console.log('END', identifier);\n            \n            this.draggingHandles[identifier] = undefined;\n        }\n    }\n\n    resetPoints = () => {\n        this.points = [\n            new Point(this.areaDimensions.width - this.areaDimensions.width * (1 / 4), this.maxVerticalHeight()),\n            new Point(this.areaDimensions.width - this.areaDimensions.width * (3 / 4), this.minVerticalHeight())\n        ];\n    };\n\n    private addMouseEventListeners() {\n        // mouse events\n        this.canvas.addEventListener('mousedown', e => {\n            e.preventDefault();\n            this.startDrag(e.clientX, e.clientY)\n        }, false);\n        this.canvas.addEventListener('mousemove', e => {\n            e.preventDefault();\n            this.moveTerrainHandle(e.clientX, e.clientY)\n        }, false);\n        this.canvas.addEventListener('mouseup', e => {\n            e.preventDefault();\n            this.endDrag()\n        }, false);\n        this.canvas.addEventListener(\"touchstart\", e => {\n            e.preventDefault();\n\n            for (let i = 0; i < e.touches.length; i++) {\n                const touch = e.targetTouches.item(i);\n                if (touch) {\n                    this.startDrag(touch.clientX, touch.clientY, touch.identifier);\n                }\n            }\n        }, false);\n        this.canvas.addEventListener(\"touchend\", e => {\n            e.preventDefault();\n\n            for (let i = 0; i < e.changedTouches.length; i++) {\n                const touch = e.changedTouches.item(i);\n                this.endDrag(touch.identifier);\n            }\n        }, false);\n        this.canvas.addEventListener(\"touchcancel\", e => {\n            e.preventDefault();\n            for (let i = 0; i < e.changedTouches.length; i++) {\n                const touch = e.changedTouches.item(i);\n                this.endDrag(touch.identifier);\n            }\n        }, false);\n        this.canvas.addEventListener(\"touchmove\", e => {\n            e.preventDefault();\n\n            for (let i = 0; i < e.changedTouches.length; i++) {\n                const touch = e.changedTouches.item(i);\n                this.moveTerrainHandle(touch.clientX, touch.clientY, touch.identifier);\n            }\n        }, false);\n    }\n}\n","import { Clock } from \"./clock\";\nimport { Dimensions } from \"./dimensions\";\nimport { Player } from \"./player\";\nimport { Point } from \"./point\";\nimport { Present } from \"./present\";\nimport { Terrain } from \"./terrain\";\nimport { Sounds } from \"./sounds\"\n\nlet canvas: HTMLCanvasElement = <HTMLCanvasElement>document.getElementById(\"game-area\");\nlet ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\");\n\n\ncanvas.height = window.innerHeight;\ncanvas.width = window.innerWidth;\nlet areaHeight = canvas.height;\nlet areaWidth = canvas.width;\n\nconst gameDuration = 30;\nlet gameExtraTime = 0;\nlet terrain: Terrain;\nlet player: Player;\nlet presents: Present[];\nlet time: Date;\nlet startTime: Date;\nlet clock: Clock;\nlet highscore: number = JSON.parse(localStorage.getItem('highscore')) || 0;\nlet stats = JSON.parse(localStorage.getItem('stats')) || {\n    longestJump: 0, highestPoint: 0, gamesPlayed: 0, topSpeed: 0\n};\nlet sounds: Sounds = new Sounds();\n\n\nconst drawSky = (ctx: CanvasRenderingContext2D) => {\n    let bg = ctx.createLinearGradient(0, 0, 0, areaHeight);\n    bg.addColorStop(0, '#474');\n    bg.addColorStop(0.5, '#333');\n    bg.addColorStop(1, '#daa');\n    ctx.fillStyle = bg;\n    ctx.fillRect(0, 0, areaWidth, areaHeight);\n}\n\nconst setAreaDimensions = () => {\n    canvas.height = window.innerHeight;\n    canvas.width = window.innerWidth;\n\n    areaHeight = canvas.height;\n    areaWidth = canvas.width;\n\n    terrain.areaDimensions.width = canvas.width;\n    terrain.areaDimensions.height = canvas.height;\n    terrain.resetPoints();\n\n    document.getElementsByTagName('body')[0].style.height = window.innerHeight + 'px';\n    drawSky(ctx);\n}\n\nconst calculateFrame = () => {\n    // Calculate time\n    let t0 = time;\n    let t1 = new Date();\n    let dt = (t1.getTime() - t0.getTime()) / 1000;\n\n    if (dt > 1000) {\n        dt = 10;\n    }\n\n    player.calculateFrame(dt, presents.filter(p => p.collected));\n\n    time = t1;\n}\n\nconst draw = () => {\n    drawSky(ctx);\n    terrain.draw();\n\n    // Score\n    ctx.font = \"50px Josefin Sans\";\n    ctx.textAlign = \"right\";\n    ctx.fillText(`${presents.length - 1}`, areaWidth - 40, 60);\n\n\n    // Score\n    ctx.font = \"14px Josefin Sans\";\n    ctx.textAlign = \"right\";\n    ctx.fillText(`Pisin hyppy ${player.longestJump()} m`, areaWidth - 40, 100);\n    ctx.fillText(`Maksimikorkeus ${player.highestPoint()} m`, areaWidth - 40, 120);\n    ctx.fillText(`Huippunopeus ${player.topSpeed()} km/h`, areaWidth - 40, 140);\n\n    // Clock\n    if (startTime) {\n        clock.draw((gameDuration + gameExtraTime) * 1000 - (time.getTime() - startTime.getTime()));\n    }\n\n    player.draw(presents.filter(p => p.collected));\n    presents.forEach((p, i) => {\n        p.draw();\n    });\n}\n\nconst updateHtmlTargets = () => {\n    document.getElementById('result').innerText = (presents.length - 1).toString();\n    document.getElementById('high-score').innerText = highscore.toString();\n    document.getElementById('games-played').innerText = stats.gamesPlayed.toString();\n    document.getElementById('longest-jump').innerText = stats.longestJump.toString();\n    document.getElementById('highest-point').innerText = stats.highestPoint.toString();\n    document.getElementById('top-speed').innerText = stats.topSpeed.toString();\n};\n\nconst updateSoundButton = () => {\n    let soundButton = document.getElementById('sound');\n    if (sounds.enabled) {\n        soundButton.innerHTML = \"&#128266;\";\n        soundButton.classList.remove(\"muted\");\n    }\n    else {\n        soundButton.innerHTML = \"&#128263;\";\n        soundButton.classList.add(\"muted\");\n    }\n}\n\nconst initGame = () => {\n    terrain = new Terrain(canvas, new Dimensions(areaWidth, areaHeight));\n    clock = new Clock(ctx, terrain);\n    player = new Player(canvas, terrain, new Point(50, 600));\n    presents = [new Present(canvas, terrain)];\n    time = new Date();\n\n    updateHtmlTargets();\n    updateSoundButton();\n}\n\nconst startGame = () => {\n    initGame();\n    startTime = new Date();\n    gameExtraTime = 0;\n    time = startTime;\n\n    let interval = setInterval(() => {\n        if (startTime.getTime() > (new Date()).getTime() - (gameDuration + gameExtraTime) * 1000) {\n            calculateFrame();\n        }\n        else {\n            clearInterval(interval);\n        }\n    }, 5);\n\n    // sounds.stopMainTune();\n    sounds.startGameTune();\n}\n\nconst refresh = () => {\n    ctx.clearRect(0, 0, areaWidth, areaHeight);\n\n    const p = presents[presents.length - 1];\n    const playerSize = player.skiWidth;\n\n    if (new Point(player.onScreenX(), player.position.y - playerSize).distanceTo(p.position) < p.width * (3 / 2)) {\n        // Pick the present\n        p.collected = true;\n        presents.push(new Present(canvas, terrain));\n        let timeIncrement =\n            -1 +\n            // factor from x-speed\n            (terrain.areaDimensions.width / player.velocity.x) *\n            // dimension factor\n            (5 * terrain.areaDimensions.height / terrain.areaDimensions.width) *\n            // size factor\n            ((terrain.areaDimensions.width + terrain.areaDimensions.height) / 5000);\n\n        timeIncrement = Math.min(10, timeIncrement);\n        gameExtraTime += timeIncrement;\n        clock.extendTime(timeIncrement);\n\n        sounds.playCollectSound();\n    }\n\n    draw();\n\n    if (startTime.getTime() > (new Date()).getTime() - (gameDuration + gameExtraTime) * 1000) {\n        requestAnimationFrame(refresh);\n    }\n    else {\n        // Game ended\n        const score = presents.length - 1;\n        document.getElementsByTagName('body')[0].classList.remove('started');\n        document.getElementById('result').innerText = score.toString();\n\n        sounds.stopGameTune();\n        // sounds.startMainTune();\n\n        // save the high score\n        highscore = Math.max(highscore, score);\n        localStorage.setItem('highscore', JSON.stringify(highscore));\n        document.getElementById('high-score').innerText = score.toString();\n\n        // Save stats\n        stats.gamesPlayed += 1;\n        stats.longestJump = Math.max(stats.longestJump || 0, player.longestJump());\n        stats.highestPoint = Math.max(stats.highestPoint || 0, player.highestPoint());\n        stats.topSpeed = Math.max(stats.topSpeed || 0, player.topSpeed());\n        localStorage.setItem('stats', JSON.stringify(stats));\n        updateHtmlTargets();\n    }\n};\n\ninitGame();\nsetAreaDimensions();\n\n// Draw first frame to the background\nsetTimeout(() => {\n    draw();\n}, 200);\n\nwindow.onresize = setAreaDimensions;\nwindow.onscroll = setAreaDimensions;\n\ndocument.getElementById('start').onclick = () => {\n    startGame();\n    document.getElementsByTagName('body')[0].classList.add('started');\n    requestAnimationFrame(refresh);\n}\n\nconst diveButton = document.getElementById('dive');\n\ndiveButton.addEventListener('mousedown', e => {\n    player.handleDiveButtonPress();\n}, false);\ndiveButton.addEventListener('mouseup', e => {\n    player.hanldeDiveButtonRelease();\n}, false);\n\ndiveButton.addEventListener('touchstart', e => {\n    player.handleDiveButtonPress();\n    diveButton.classList.add('active')\n    e.preventDefault();\n}, false);\ndiveButton.addEventListener('touchend', e => {\n    player.hanldeDiveButtonRelease();\n    diveButton.classList.remove('active')\n    e.preventDefault();\n}, false);\ndiveButton.addEventListener('touchcancel', e => {\n    player.hanldeDiveButtonRelease();\n    diveButton.classList.remove('active')\n    e.preventDefault();\n}, false);\n\n\nconst soundButton = document.getElementById('sound');\nsoundButton.addEventListener('click', e => {\n    sounds.toggleMute();\n\n    updateSoundButton();\n\n    e.preventDefault();\n}, false);","// Royalty free music thanks to https://soundcloud.com/ashamaluevmusic\n\nexport class Sounds {\n    constructor() {\n        this.enabled = JSON.parse(localStorage.getItem('soundsEnabled')) !== false;\n    }\n\n    enabled: boolean;\n    mainTune: HTMLAudioElement;\n    gameTune: HTMLAudioElement;\n    mainVolume = 0.15;\n    gameVolume = 0.15;\n    fxVolume = 1;\n\n    startGameTune = () => {\n        // Stop if running already;\n        if (this.gameTune) {\n            this.stopGameTune();\n        }\n\n        this.gameTune = new Audio('/audio/sleighride.mp3');\n        // this.gameTune = new Audio('/audio/Rush%20Coil%20-%208-bit%20Christmas/Rush%20Coil%20-%208-bit%20Christmas%20-%2004%20Little%20Drummer%20Boy.mp3');\n        this.gameTune.loop = true;\n        this.gameTune.volume = this.enabled ? this.gameVolume : 0;\n        this.gameTune.play();\n    }\n\n    stopGameTune = () => {\n        this.stopTune(this.gameTune);\n    }\n\n    startMainTune = () => {\n        // Stop if running already;\n        if (this.mainTune) {\n            this.stopMainTune();\n        }\n\n        this.mainTune = new Audio('/audio/Rush%20Coil%20-%208-bit%20Christmas/Rush%20Coil%20-%208-bit%20Christmas%20-%2012%20Auld%20Lang%20Syne.mp3');\n        this.mainTune.loop = true;\n        this.mainTune.volume = this.enabled ? this.mainVolume : 0;\n        this.mainTune.play();\n    }\n\n    stopMainTune = () => {\n        this.stopTune(this.mainTune);\n    }\n\n    stopTune = (tune: HTMLAudioElement) => {\n        // Stop the game tune\n        let h = setInterval(() => {\n            if (tune) {\n                tune.volume -= Math.min(0.01, tune.volume);\n\n                if (tune.volume <= 0) {\n                    tune.pause();\n                    clearInterval(h);\n                }\n            }\n        }, 100)\n    }\n\n    playCollectSound = () => {\n        if (this.enabled) {\n            let collectSound = new Audio('/audio/jingle.mp3');\n            collectSound.volume = this.fxVolume;\n            collectSound.play();\n        }\n    }\n\n    toggleMute = () => {\n        this.enabled = !this.enabled;\n\n        localStorage.setItem('soundsEnabled', this.enabled ? 'true' : 'false');\n\n        if (this.mainTune) {\n            this.mainTune.volume = this.enabled ? this.mainVolume : 0;\n        }\n        if (this.gameTune) {\n            this.gameTune.volume = this.enabled ? this.gameVolume : 0;\n        }\n    }\n}"],"sourceRoot":""}